# -*- coding: utf-8 -*-
"""
Created on Sat Sep 28 16:05:19 2013

@author: olgis



The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

"""
import time

    
def num_divisors(n):
    if n % 2 == 0:
        n = n/2
    divisors = 1
    count = 0
    while n % 2 == 0:
        count += 1
        n = n/2
    divisors = divisors * (count + 1)
    p = 3
    while n != 1:
        count = 0
        while n % p == 0:
            count += 1
            n = n/p
        divisors = divisors * (count + 1)
        p += 2
    return divisors
    
    
 
def find_triangular_index(limit):
    n = 1
    num, next_num = num_divisors(n), num_divisors(n + 1)
    while num * next_num < limit:
        n += 1
        num, next_num = next_num, num_divisors(n + 1)
    return n
 
start = time.time()
index = find_triangular_index(500)
triangle = (index * (index + 1)) / 2
elapsed = (time.time() - start)
 
print "The result is %s, found in %s sec." % (triangle,elapsed)
#The result is 76576500, found in 2.62444591522 sec.